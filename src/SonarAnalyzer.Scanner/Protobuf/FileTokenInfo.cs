// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileTokenInfo.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SonarAnalyzer.Protobuf {

  /// <summary>Holder for reflection information generated from FileTokenInfo.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class FileTokenInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for FileTokenInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FileTokenInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNGaWxlVG9rZW5JbmZvLnByb3RvEg1zb25hcmFuYWx5emVyIlsKCVRleHRS",
            "YW5nZRISCgpzdGFydF9saW5lGAEgASgFEhAKCGVuZF9saW5lGAIgASgFEhQK",
            "DHN0YXJ0X29mZnNldBgDIAEoBRISCgplbmRfb2Zmc2V0GAQgASgFItMBCg1G",
            "aWxlVG9rZW5JbmZvEhEKCWZpbGVfcGF0aBgBIAEoCRJACgp0b2tlbl9pbmZv",
            "GAIgAygLMiwuc29uYXJhbmFseXplci5GaWxlVG9rZW5JbmZvLlRva2VuSW5m",
            "b0luRmlsZRptCg9Ub2tlbkluZm9JbkZpbGUSLAoKdG9rZW5fdHlwZRgBIAEo",
            "DjIYLnNvbmFyYW5hbHl6ZXIuVG9rZW5UeXBlEiwKCnRleHRfcmFuZ2UYAiAB",
            "KAsyGC5zb25hcmFuYWx5emVyLlRleHRSYW5nZSLkAQoWRmlsZVRva2VuUmVm",
            "ZXJlbmNlSW5mbxIRCglmaWxlX3BhdGgYASABKAkSSAoJcmVmZXJlbmNlGAIg",
            "AygLMjUuc29uYXJhbmFseXplci5GaWxlVG9rZW5SZWZlcmVuY2VJbmZvLlN5",
            "bWJvbFJlZmVyZW5jZRptCg9TeW1ib2xSZWZlcmVuY2USLQoLZGVjbGFyYXRp",
            "b24YASABKAsyGC5zb25hcmFuYWx5emVyLlRleHRSYW5nZRIrCglyZWZlcmVu",
            "Y2UYAiADKAsyGC5zb25hcmFuYWx5emVyLlRleHRSYW5nZSqVAQoJVG9rZW5U",
            "eXBlEgsKB1VOS05PV04QABIUChBERUNMQVJBVElPTl9OQU1FEAESDgoKSURF",
            "TlRJRklFUhACEhMKD05VTUVSSUNfTElURVJBTBADEhIKDlNUUklOR19MSVRF",
            "UkFMEAQSCwoHS0VZV09SRBAFEgsKB0NPTU1FTlQQBhISCg5UWVBFX1BBUkFN",
            "RVRFUhAHQjwKH29yZy5zb25hcnNvdXJjZS5kb3RuZXQucHJvdG9jb2xIAaoC",
            "FlNvbmFyQW5hbHl6ZXIuUHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SonarAnalyzer.Protobuf.TokenType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SonarAnalyzer.Protobuf.TextRange), global::SonarAnalyzer.Protobuf.TextRange.Parser, new[]{ "StartLine", "EndLine", "StartOffset", "EndOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SonarAnalyzer.Protobuf.FileTokenInfo), global::SonarAnalyzer.Protobuf.FileTokenInfo.Parser, new[]{ "FilePath", "TokenInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SonarAnalyzer.Protobuf.FileTokenInfo.Types.TokenInfoInFile), global::SonarAnalyzer.Protobuf.FileTokenInfo.Types.TokenInfoInFile.Parser, new[]{ "TokenType", "TextRange" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::SonarAnalyzer.Protobuf.FileTokenReferenceInfo), global::SonarAnalyzer.Protobuf.FileTokenReferenceInfo.Parser, new[]{ "FilePath", "Reference" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SonarAnalyzer.Protobuf.FileTokenReferenceInfo.Types.SymbolReference), global::SonarAnalyzer.Protobuf.FileTokenReferenceInfo.Types.SymbolReference.Parser, new[]{ "Declaration", "Reference" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum TokenType {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("DECLARATION_NAME")] DeclarationName = 1,
    [pbr::OriginalName("IDENTIFIER")] Identifier = 2,
    [pbr::OriginalName("NUMERIC_LITERAL")] NumericLiteral = 3,
    [pbr::OriginalName("STRING_LITERAL")] StringLiteral = 4,
    [pbr::OriginalName("KEYWORD")] Keyword = 5,
    [pbr::OriginalName("COMMENT")] Comment = 6,
    [pbr::OriginalName("TYPE_PARAMETER")] TypeParameter = 7,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  Lines start at 1 and line offsets start at 0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TextRange : pb::IMessage<TextRange> {
    private static readonly pb::MessageParser<TextRange> _parser = new pb::MessageParser<TextRange>(() => new TextRange());
    public static pb::MessageParser<TextRange> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::SonarAnalyzer.Protobuf.FileTokenInfoReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TextRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TextRange(TextRange other) : this() {
      startLine_ = other.startLine_;
      endLine_ = other.endLine_;
      startOffset_ = other.startOffset_;
      endOffset_ = other.endOffset_;
    }

    public TextRange Clone() {
      return new TextRange(this);
    }

    /// <summary>Field number for the "start_line" field.</summary>
    public const int StartLineFieldNumber = 1;
    private int startLine_;
    public int StartLine {
      get { return startLine_; }
      set {
        startLine_ = value;
      }
    }

    /// <summary>Field number for the "end_line" field.</summary>
    public const int EndLineFieldNumber = 2;
    private int endLine_;
    /// <summary>
    ///  End line (inclusive)
    /// </summary>
    public int EndLine {
      get { return endLine_; }
      set {
        endLine_ = value;
      }
    }

    /// <summary>Field number for the "start_offset" field.</summary>
    public const int StartOffsetFieldNumber = 3;
    private int startOffset_;
    public int StartOffset {
      get { return startOffset_; }
      set {
        startOffset_ = value;
      }
    }

    /// <summary>Field number for the "end_offset" field.</summary>
    public const int EndOffsetFieldNumber = 4;
    private int endOffset_;
    public int EndOffset {
      get { return endOffset_; }
      set {
        endOffset_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as TextRange);
    }

    public bool Equals(TextRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartLine != other.StartLine) return false;
      if (EndLine != other.EndLine) return false;
      if (StartOffset != other.StartOffset) return false;
      if (EndOffset != other.EndOffset) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (StartLine != 0) hash ^= StartLine.GetHashCode();
      if (EndLine != 0) hash ^= EndLine.GetHashCode();
      if (StartOffset != 0) hash ^= StartOffset.GetHashCode();
      if (EndOffset != 0) hash ^= EndOffset.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StartLine != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartLine);
      }
      if (EndLine != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndLine);
      }
      if (StartOffset != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StartOffset);
      }
      if (EndOffset != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndOffset);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (StartLine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartLine);
      }
      if (EndLine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndLine);
      }
      if (StartOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartOffset);
      }
      if (EndOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndOffset);
      }
      return size;
    }

    public void MergeFrom(TextRange other) {
      if (other == null) {
        return;
      }
      if (other.StartLine != 0) {
        StartLine = other.StartLine;
      }
      if (other.EndLine != 0) {
        EndLine = other.EndLine;
      }
      if (other.StartOffset != 0) {
        StartOffset = other.StartOffset;
      }
      if (other.EndOffset != 0) {
        EndOffset = other.EndOffset;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartLine = input.ReadInt32();
            break;
          }
          case 16: {
            EndLine = input.ReadInt32();
            break;
          }
          case 24: {
            StartOffset = input.ReadInt32();
            break;
          }
          case 32: {
            EndOffset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FileTokenInfo : pb::IMessage<FileTokenInfo> {
    private static readonly pb::MessageParser<FileTokenInfo> _parser = new pb::MessageParser<FileTokenInfo>(() => new FileTokenInfo());
    public static pb::MessageParser<FileTokenInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::SonarAnalyzer.Protobuf.FileTokenInfoReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FileTokenInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FileTokenInfo(FileTokenInfo other) : this() {
      filePath_ = other.filePath_;
      tokenInfo_ = other.tokenInfo_.Clone();
    }

    public FileTokenInfo Clone() {
      return new FileTokenInfo(this);
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 1;
    private string filePath_ = "";
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_info" field.</summary>
    public const int TokenInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SonarAnalyzer.Protobuf.FileTokenInfo.Types.TokenInfoInFile> _repeated_tokenInfo_codec
        = pb::FieldCodec.ForMessage(18, global::SonarAnalyzer.Protobuf.FileTokenInfo.Types.TokenInfoInFile.Parser);
    private readonly pbc::RepeatedField<global::SonarAnalyzer.Protobuf.FileTokenInfo.Types.TokenInfoInFile> tokenInfo_ = new pbc::RepeatedField<global::SonarAnalyzer.Protobuf.FileTokenInfo.Types.TokenInfoInFile>();
    public pbc::RepeatedField<global::SonarAnalyzer.Protobuf.FileTokenInfo.Types.TokenInfoInFile> TokenInfo {
      get { return tokenInfo_; }
    }

    public override bool Equals(object other) {
      return Equals(other as FileTokenInfo);
    }

    public bool Equals(FileTokenInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FilePath != other.FilePath) return false;
      if(!tokenInfo_.Equals(other.tokenInfo_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      hash ^= tokenInfo_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FilePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FilePath);
      }
      tokenInfo_.WriteTo(output, _repeated_tokenInfo_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      size += tokenInfo_.CalculateSize(_repeated_tokenInfo_codec);
      return size;
    }

    public void MergeFrom(FileTokenInfo other) {
      if (other == null) {
        return;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
      tokenInfo_.Add(other.tokenInfo_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FilePath = input.ReadString();
            break;
          }
          case 18: {
            tokenInfo_.AddEntriesFrom(input, _repeated_tokenInfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FileTokenInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class TokenInfoInFile : pb::IMessage<TokenInfoInFile> {
        private static readonly pb::MessageParser<TokenInfoInFile> _parser = new pb::MessageParser<TokenInfoInFile>(() => new TokenInfoInFile());
        public static pb::MessageParser<TokenInfoInFile> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::SonarAnalyzer.Protobuf.FileTokenInfo.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public TokenInfoInFile() {
          OnConstruction();
        }

        partial void OnConstruction();

        public TokenInfoInFile(TokenInfoInFile other) : this() {
          tokenType_ = other.tokenType_;
          TextRange = other.textRange_ != null ? other.TextRange.Clone() : null;
        }

        public TokenInfoInFile Clone() {
          return new TokenInfoInFile(this);
        }

        /// <summary>Field number for the "token_type" field.</summary>
        public const int TokenTypeFieldNumber = 1;
        private global::SonarAnalyzer.Protobuf.TokenType tokenType_ = 0;
        public global::SonarAnalyzer.Protobuf.TokenType TokenType {
          get { return tokenType_; }
          set {
            tokenType_ = value;
          }
        }

        /// <summary>Field number for the "text_range" field.</summary>
        public const int TextRangeFieldNumber = 2;
        private global::SonarAnalyzer.Protobuf.TextRange textRange_;
        public global::SonarAnalyzer.Protobuf.TextRange TextRange {
          get { return textRange_; }
          set {
            textRange_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as TokenInfoInFile);
        }

        public bool Equals(TokenInfoInFile other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TokenType != other.TokenType) return false;
          if (!object.Equals(TextRange, other.TextRange)) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (TokenType != 0) hash ^= TokenType.GetHashCode();
          if (textRange_ != null) hash ^= TextRange.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (TokenType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) TokenType);
          }
          if (textRange_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(TextRange);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (TokenType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TokenType);
          }
          if (textRange_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextRange);
          }
          return size;
        }

        public void MergeFrom(TokenInfoInFile other) {
          if (other == null) {
            return;
          }
          if (other.TokenType != 0) {
            TokenType = other.TokenType;
          }
          if (other.textRange_ != null) {
            if (textRange_ == null) {
              textRange_ = new global::SonarAnalyzer.Protobuf.TextRange();
            }
            TextRange.MergeFrom(other.TextRange);
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                tokenType_ = (global::SonarAnalyzer.Protobuf.TokenType) input.ReadEnum();
                break;
              }
              case 18: {
                if (textRange_ == null) {
                  textRange_ = new global::SonarAnalyzer.Protobuf.TextRange();
                }
                input.ReadMessage(textRange_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FileTokenReferenceInfo : pb::IMessage<FileTokenReferenceInfo> {
    private static readonly pb::MessageParser<FileTokenReferenceInfo> _parser = new pb::MessageParser<FileTokenReferenceInfo>(() => new FileTokenReferenceInfo());
    public static pb::MessageParser<FileTokenReferenceInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::SonarAnalyzer.Protobuf.FileTokenInfoReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FileTokenReferenceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FileTokenReferenceInfo(FileTokenReferenceInfo other) : this() {
      filePath_ = other.filePath_;
      reference_ = other.reference_.Clone();
    }

    public FileTokenReferenceInfo Clone() {
      return new FileTokenReferenceInfo(this);
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 1;
    private string filePath_ = "";
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reference" field.</summary>
    public const int ReferenceFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SonarAnalyzer.Protobuf.FileTokenReferenceInfo.Types.SymbolReference> _repeated_reference_codec
        = pb::FieldCodec.ForMessage(18, global::SonarAnalyzer.Protobuf.FileTokenReferenceInfo.Types.SymbolReference.Parser);
    private readonly pbc::RepeatedField<global::SonarAnalyzer.Protobuf.FileTokenReferenceInfo.Types.SymbolReference> reference_ = new pbc::RepeatedField<global::SonarAnalyzer.Protobuf.FileTokenReferenceInfo.Types.SymbolReference>();
    public pbc::RepeatedField<global::SonarAnalyzer.Protobuf.FileTokenReferenceInfo.Types.SymbolReference> Reference {
      get { return reference_; }
    }

    public override bool Equals(object other) {
      return Equals(other as FileTokenReferenceInfo);
    }

    public bool Equals(FileTokenReferenceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FilePath != other.FilePath) return false;
      if(!reference_.Equals(other.reference_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      hash ^= reference_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FilePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FilePath);
      }
      reference_.WriteTo(output, _repeated_reference_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      size += reference_.CalculateSize(_repeated_reference_codec);
      return size;
    }

    public void MergeFrom(FileTokenReferenceInfo other) {
      if (other == null) {
        return;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
      reference_.Add(other.reference_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FilePath = input.ReadString();
            break;
          }
          case 18: {
            reference_.AddEntriesFrom(input, _repeated_reference_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FileTokenReferenceInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class SymbolReference : pb::IMessage<SymbolReference> {
        private static readonly pb::MessageParser<SymbolReference> _parser = new pb::MessageParser<SymbolReference>(() => new SymbolReference());
        public static pb::MessageParser<SymbolReference> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::SonarAnalyzer.Protobuf.FileTokenReferenceInfo.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public SymbolReference() {
          OnConstruction();
        }

        partial void OnConstruction();

        public SymbolReference(SymbolReference other) : this() {
          Declaration = other.declaration_ != null ? other.Declaration.Clone() : null;
          reference_ = other.reference_.Clone();
        }

        public SymbolReference Clone() {
          return new SymbolReference(this);
        }

        /// <summary>Field number for the "declaration" field.</summary>
        public const int DeclarationFieldNumber = 1;
        private global::SonarAnalyzer.Protobuf.TextRange declaration_;
        public global::SonarAnalyzer.Protobuf.TextRange Declaration {
          get { return declaration_; }
          set {
            declaration_ = value;
          }
        }

        /// <summary>Field number for the "reference" field.</summary>
        public const int ReferenceFieldNumber = 2;
        private static readonly pb::FieldCodec<global::SonarAnalyzer.Protobuf.TextRange> _repeated_reference_codec
            = pb::FieldCodec.ForMessage(18, global::SonarAnalyzer.Protobuf.TextRange.Parser);
        private readonly pbc::RepeatedField<global::SonarAnalyzer.Protobuf.TextRange> reference_ = new pbc::RepeatedField<global::SonarAnalyzer.Protobuf.TextRange>();
        public pbc::RepeatedField<global::SonarAnalyzer.Protobuf.TextRange> Reference {
          get { return reference_; }
        }

        public override bool Equals(object other) {
          return Equals(other as SymbolReference);
        }

        public bool Equals(SymbolReference other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Declaration, other.Declaration)) return false;
          if(!reference_.Equals(other.reference_)) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (declaration_ != null) hash ^= Declaration.GetHashCode();
          hash ^= reference_.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (declaration_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Declaration);
          }
          reference_.WriteTo(output, _repeated_reference_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (declaration_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Declaration);
          }
          size += reference_.CalculateSize(_repeated_reference_codec);
          return size;
        }

        public void MergeFrom(SymbolReference other) {
          if (other == null) {
            return;
          }
          if (other.declaration_ != null) {
            if (declaration_ == null) {
              declaration_ = new global::SonarAnalyzer.Protobuf.TextRange();
            }
            Declaration.MergeFrom(other.Declaration);
          }
          reference_.Add(other.reference_);
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (declaration_ == null) {
                  declaration_ = new global::SonarAnalyzer.Protobuf.TextRange();
                }
                input.ReadMessage(declaration_);
                break;
              }
              case 18: {
                reference_.AddEntriesFrom(input, _repeated_reference_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
